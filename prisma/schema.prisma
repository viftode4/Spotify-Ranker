generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  isAdmin          Boolean           @default(true)
  accounts         Account[]
  comments         Comment[]
  ratings          Rating[]
  sessions         Session[]
  receivedComments UserComment[]     @relation("CommentedUser")
  givenComments    UserComment[]     @relation("CommenterUser")
  commentVotes     UserCommentVote[]
  receivedRatings  UserRating[]      @relation("RatedUser")
  givenRatings     UserRating[]      @relation("RaterUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id          String    @id @default(cuid())
  spotifyId   String    @unique
  name        String
  artist      String
  imageUrl    String
  releaseDate String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  ratings     Rating[]
  tracks      Track[]
}

model Track {
  id       String @id @default(cuid())
  name     String
  duration Int
  number   Int
  albumId  String
  album    Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  albumId   String
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, albumId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isHidden  Boolean  @default(false)
  userId    String
  albumId   String
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRating {
  id          String   @id @default(cuid())
  score       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ratedUserId String
  raterUserId String
  ratedUser   User     @relation("RatedUser", fields: [ratedUserId], references: [id], onDelete: Cascade)
  raterUser   User     @relation("RaterUser", fields: [raterUserId], references: [id], onDelete: Cascade)

  @@unique([ratedUserId, raterUserId])
}

model UserComment {
  id          String            @id @default(cuid())
  content     String            @db.VarChar(20)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ratedUserId String
  raterUserId String
  votes       Int               @default(0)
  ratedUser   User              @relation("CommentedUser", fields: [ratedUserId], references: [id], onDelete: Cascade)
  raterUser   User              @relation("CommenterUser", fields: [raterUserId], references: [id], onDelete: Cascade)
  userVotes   UserCommentVote[]

  @@unique([ratedUserId, raterUserId])
}

model UserCommentVote {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  userCommentId String
  userId        String
  value         Int
  userComment   UserComment @relation(fields: [userCommentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userCommentId, userId])
}
